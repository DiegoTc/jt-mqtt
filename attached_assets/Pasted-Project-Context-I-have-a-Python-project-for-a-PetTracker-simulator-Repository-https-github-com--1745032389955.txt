Project Context:
I have a Python project for a PetTracker simulator. Repository: https://github.com/DiegoTc/jt-mqtt

Currently, the project has:

A simulator.py that simulates GPS location and sends MQTT messages.

A converters/jt808_to_json_converter.py that handles JT808 messages and converts them to JSON/MQTT.

A publishers/mqtt_publisher.py that sends MQTT messages.

A main.py that launches both the simulator and the JT808 converter together.

‚ùó Current Problems:
The current simulator.py is badly designed (it floods MQTT broker, uses bad timing, consumes high CPU).

The **JT808-to-JSON converter (jt808_to_json_converter.py) is working correctly and must not be modified.

The simulator was generated by an agent but has critical architecture flaws.

üéØ Tasks to Perform:
Delete the current simulator.py (no new filenames).

Write a new simulator.py from scratch, with:

Clean asyncio coroutine architecture.

Realistic GPS movement simulation (small latitude/longitude drift).

Location MQTT messages sent every 5 seconds.

Heartbeat MQTT messages sent every 30 seconds.

Status MQTT messages sent every 5 minutes.

Controlled sending intervals (no message flooding).

Minimal CPU usage (no tight while loops).

MQTT topic conventions must match:

pettracker/<device_id>/location

pettracker/<device_id>/heartbeat

pettracker/<device_id>/status

Update main.py:

Load settings from a config.yaml file:

yaml
Copy
Edit
mqtt:
  broker_url: "localhost"
  broker_port: 1883

device:
  device_id: "123456"
  start_lat: 14.072275
  start_lon: -87.192136
Use a load_config() function to load these parameters cleanly.

Launch both:

The new GPS simulator (GPSTrackingSimulator).

The existing JT808ToJsonConverter.

Use asyncio.gather() to run them concurrently.

üö® Very Important Rules:
Do NOT modify anything inside converters/jt808_to_json_converter.py. (Converter must remain intact.)

Do NOT modify anything inside publishers/mqtt_publisher.py.

Only modify:

simulator.py (rewrite from scratch)

main.py (update config loading and launching)

MQTT must continue to use a local Mosquitto server (localhost:1883).

No message flooding.

No high CPU usage.

Topic structures and formats must remain exactly as used currently.

üìã Deliverables Expected:
New clean simulator.py.

Updated main.py.

Sample working config.yaml.

Fully functional with local Mosquitto MQTT broker.

Code ready to commit and push to GitHub repository.